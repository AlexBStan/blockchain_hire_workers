pragma solidity >=0.4.22 <0.6.0;

contract junior_security_dev {
    
    string name;
    uint age;
    bool bachelor_degree;
    bool master_degree;
    uint test_mark_networking;
    uint test_mark_os;
    bool database_knowledge;
    bool english_knowledge;
    string[] previous_exp;
    string[] prog_lang;
    bool comunication_skils;
    bool ccna_security_cert;
    constructor(string memory _name, uint _age, bool _bachelor_degree, bool _master_degree, uint _test_mark_networking, uint _test_mark_os,
               bool _database_knowledge, bool _english_knowledge, string[] memory _previous_exp, string[] memory _prog_lang, bool _comunication_skils,
               bool _ccna_security_cert) internal {
                   name=_name;
                   age=_age;
                   bachelor_degree=_bachelor_degree;
                   master_degree=_master_degree;
                   test_mark_networking=_test_mark_networking;
                   test_mark_os=_test_mark_os;
                   database_knowledge=_database_knowledge;
                   english_knowledge=_english_knowledge;
                   previous_exp=_previous_exp;
                   prog_lang=_prog_lang;
                   comunication_skils=_comunication_skils;
                   ccna_security_cert=_ccna_security_cert;
                }
                
    function give_mark_networking(uint mark) public {
        
        require(mark>0 && mark <=10);
        test_mark_networking=mark;
    }
    
    function give_mark_os(uint mark) public {
        
        assert(mark>0 && mark <=10);
        test_mark_os=mark;
    }
    
    function minimum_requirement() public view returns (int) {
        
        int OK=0;
        if(test_mark_networking>=5 && test_mark_networking>=5 && english_knowledge==true && comunication_skils==true )
          OK=1;
        if(ccna_security_cert==true)
          OK=1;
       
        return OK;
    }
        
 }
               
               

contract security_dev is junior_security_dev {
    
    bool private ceh_cert;
    uint private test_mark_security;
    bool private cloud_knowledge;
    bool private social_engineering_knowledge;
    bool private kali_linux_knowledge;
    
    function give_mark_security(uint mark) public {
        
        require(mark>0 && mark <=10);
        test_mark_security=mark;
    }
    
        function minimum_requirement() public view returns (int) {
        
          int OK=0;
          if(test_mark_networking>=8 && test_mark_networking>=8 && english_knowledge==true && comunication_skils==true && database_knowledge==true && cloud_knowledge==true)
             OK=1;       
          if(ceh_cert==true)
             OK=1;
          return OK; 
           
        }
        
    
}

